name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'liberica'
        cache: gradle

    - name: Build with Gradle
      run: ./gradlew build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          web/build/libs/*.jar
          plugins/*.jar

    # Only run release steps when a tag is pushed
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          web/build/libs/*.jar
          plugins/*.jar

    # Build and push Docker image for the main application using Docker build
    - name: Login to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}

        # Build the application first to ensure we have the JAR file
        ./gradlew :web:build

        # Build and push Docker image using Docker build
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          -t ghcr.io/${{ github.repository_owner }}/opdsko:$VERSION \
          -t ghcr.io/${{ github.repository_owner }}/opdsko:latest \
          --push \
          -f Dockerfile.fromjar \
          .
