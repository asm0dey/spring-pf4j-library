/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.AbstractSpringDAOImpl
import generated.jooq.tables.Author
import generated.jooq.tables.records.AuthorRecord

import java.time.OffsetDateTime

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.16",
        "schema version:0"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class AuthorDao(configuration: Configuration?) : AbstractSpringDAOImpl<AuthorRecord, generated.jooq.tables.pojos.Author, Long>(Author.AUTHOR, generated.jooq.tables.pojos.Author::class.java, configuration) {

    /**
     * Create a new AuthorDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.Author): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<generated.jooq.tables.pojos.Author> = fetchRange(Author.AUTHOR.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<generated.jooq.tables.pojos.Author> = fetch(Author.AUTHOR.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): generated.jooq.tables.pojos.Author? = fetchOne(Author.AUTHOR.ID, value)

    /**
     * Fetch records that have <code>fb2id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFb2id(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Author> = fetchRange(Author.AUTHOR.FB2ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>fb2id IN (values)</code>
     */
    fun fetchByFb2id(vararg values: String): List<generated.jooq.tables.pojos.Author> = fetch(Author.AUTHOR.FB2ID, *values)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Author> = fetchRange(Author.AUTHOR.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<generated.jooq.tables.pojos.Author> = fetch(Author.AUTHOR.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>middle_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfMiddleName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Author> = fetchRange(Author.AUTHOR.MIDDLE_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>middle_name IN (values)</code>
     */
    fun fetchByMiddleName(vararg values: String): List<generated.jooq.tables.pojos.Author> = fetch(Author.AUTHOR.MIDDLE_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Author> = fetchRange(Author.AUTHOR.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByLastName(vararg values: String): List<generated.jooq.tables.pojos.Author> = fetch(Author.AUTHOR.LAST_NAME, *values)

    /**
     * Fetch records that have <code>nickname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfNickname(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Author> = fetchRange(Author.AUTHOR.NICKNAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>nickname IN (values)</code>
     */
    fun fetchByNickname(vararg values: String): List<generated.jooq.tables.pojos.Author> = fetch(Author.AUTHOR.NICKNAME, *values)

    /**
     * Fetch records that have <code>added BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAdded(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.Author> = fetchRange(Author.AUTHOR.ADDED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>added IN (values)</code>
     */
    fun fetchByAdded(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.Author> = fetch(Author.AUTHOR.ADDED, *values)

    /**
     * Fetch records that have <code>full_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFullName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Author> = fetchRange(Author.AUTHOR.FULL_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>full_name IN (values)</code>
     */
    fun fetchByFullName(vararg values: String): List<generated.jooq.tables.pojos.Author> = fetch(Author.AUTHOR.FULL_NAME, *values)

    /**
     * Fetch a unique record that has <code>full_name = value</code>
     */
    fun fetchOneByFullName(value: String): generated.jooq.tables.pojos.Author? = fetchOne(Author.AUTHOR.FULL_NAME, value)
}
