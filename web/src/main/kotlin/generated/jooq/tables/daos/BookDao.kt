/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables.daos


import generated.jooq.AbstractSpringDAOImpl
import generated.jooq.tables.Book
import generated.jooq.tables.records.BookRecord

import java.time.OffsetDateTime

import javax.annotation.processing.Generated

import kotlin.collections.List

import org.jooq.Configuration
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.16",
        "schema version:0"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class BookDao(configuration: Configuration?) : AbstractSpringDAOImpl<BookRecord, generated.jooq.tables.pojos.Book, Long>(Book.BOOK, generated.jooq.tables.pojos.Book::class.java, configuration) {

    /**
     * Create a new BookDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: generated.jooq.tables.pojos.Book): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): generated.jooq.tables.pojos.Book? = fetchOne(Book.BOOK.ID, value)

    /**
     * Fetch records that have <code>path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPath(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.PATH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>path IN (values)</code>
     */
    fun fetchByPath(vararg values: String): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.PATH, *values)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.NAME, *values)

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDate(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    fun fetchByDate(vararg values: String): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.DATE, *values)

    /**
     * Fetch records that have <code>added BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAdded(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.ADDED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>added IN (values)</code>
     */
    fun fetchByAdded(vararg values: OffsetDateTime): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.ADDED, *values)

    /**
     * Fetch records that have <code>sequence BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSequence(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.SEQUENCE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>sequence IN (values)</code>
     */
    fun fetchBySequence(vararg values: String): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.SEQUENCE, *values)

    /**
     * Fetch records that have <code>sequence_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSequenceNumber(lowerInclusive: Long?, upperInclusive: Long?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.SEQUENCE_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>sequence_number IN (values)</code>
     */
    fun fetchBySequenceNumber(vararg values: Long): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.SEQUENCE_NUMBER, *values.toTypedArray())

    /**
     * Fetch records that have <code>lang BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLang(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.LANG, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>lang IN (values)</code>
     */
    fun fetchByLang(vararg values: String): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.LANG, *values)

    /**
     * Fetch records that have <code>zip_file BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfZipFile(lowerInclusive: String?, upperInclusive: String?): List<generated.jooq.tables.pojos.Book> = fetchRange(Book.BOOK.ZIP_FILE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>zip_file IN (values)</code>
     */
    fun fetchByZipFile(vararg values: String): List<generated.jooq.tables.pojos.Book> = fetch(Book.BOOK.ZIP_FILE, *values)
}
