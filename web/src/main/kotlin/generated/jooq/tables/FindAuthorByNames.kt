/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Public
import generated.jooq.tables.records.FindAuthorByNamesRecord

import javax.annotation.processing.Generated

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.16",
        "schema version:0"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class FindAuthorByNames(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, FindAuthorByNamesRecord>?,
    parentPath: InverseForeignKey<out Record, FindAuthorByNamesRecord>?,
    aliased: Table<FindAuthorByNamesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<FindAuthorByNamesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.find_author_by_names</code>
         */
        val FIND_AUTHOR_BY_NAMES: FindAuthorByNames = FindAuthorByNames()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FindAuthorByNamesRecord> = FindAuthorByNamesRecord::class.java

    /**
     * The column <code>public.find_author_by_names.id</code>.
     */
    val ID: TableField<FindAuthorByNamesRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<FindAuthorByNamesRecord>?): this(alias, null, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(null, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB)))
    ), null)
    private constructor(alias: Name, aliased: Table<FindAuthorByNamesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>public.find_author_by_names</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.find_author_by_names</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.find_author_by_names</code> table reference
     */
    constructor(): this(DSL.name("find_author_by_names"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): FindAuthorByNames = FindAuthorByNames(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): FindAuthorByNames = FindAuthorByNames(alias, this, parameters)
    override fun `as`(alias: Table<*>): FindAuthorByNames = FindAuthorByNames(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): FindAuthorByNames = FindAuthorByNames(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): FindAuthorByNames = FindAuthorByNames(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): FindAuthorByNames = FindAuthorByNames(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          iFirstName: String?
        , iMiddleName: String?
        , iLastName: String?
        , iNickname: String?
    ): FindAuthorByNames = FindAuthorByNames(DSL.name("find_author_by_names"), null, arrayOf(
        DSL.value(iFirstName, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(iMiddleName, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(iLastName, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB))),
        DSL.value(iNickname, SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL::text"), SQLDataType.CLOB)))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          iFirstName: Field<String?>
        , iMiddleName: Field<String?>
        , iLastName: Field<String?>
        , iNickname: Field<String?>
    ): FindAuthorByNames = FindAuthorByNames(DSL.name("find_author_by_names"), null, arrayOf(
        iFirstName,
        iMiddleName,
        iLastName,
        iNickname
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
